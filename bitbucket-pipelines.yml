# Template Terraform to deploy to Cloud Infrastructure

# This template allows you to deploy your infrastructure using Terraform to supported cloud providers.
# The workflow allows running tests, security scans on feature branches (as well as master).
# After merging code to master the infrastructure will be deployed to cloud according to the given terraform template.

# Prerequisites: credentials according to used cloud provider.
# For advanced cases, please, follow terraform docs https://www.terraform.io/docs/index.html.

pipelines:
  default:
    - parallel:
        - step:
            name: Validate
            image: hashicorp/terraform
            script:
               - terraform fmt -recursive -check

        - step:
            name: Validate
            image: ubuntu:latest
            trigger: manual
            script:
               - wget "https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip" -O tflint.zip
               - unzip tflint.zip && mv tflint /usr/local/bin/ && tflint --version
               - tflint --recursive --config "$(pwd)/.tflint.hcl"

        - step:
            name: Validate
            image: bridgecrew/checkov:latest
            trigger: manual
            script:
              - wget "https://github.com/liamg/tfsec/releases/latest/download/tfsec-linux-amd64" -O tfsec
              - chmod +x tfsec && mv tfsec /usr/local/bin/ && tfsec --version
              - tfsec .

        - step:
            name: Security Scan
            script:
              - pipe: atlassian/git-secrets-scan:0.5.1

  pull-requests:
    '**':
      - step:
          name: Run Infracost on pull requests to check costs and policies
          # Always use the latest 0.10.x version to pick up bug fixes and new resources.
          image: infracost/infracost:ci-0.10
          script:
            # Clone the base branch of the pull request (e.g. main/master) into a temp directory.
            # You may want to use $BITBUCKET_GIT_SSH_ORIGIN if you're using a private repository
            - git clone $BITBUCKET_GIT_HTTP_ORIGIN --branch=$BITBUCKET_PR_DESTINATION_BRANCH --single-branch /tmp/base

            # If you use private modules, add an environment variable or secret
            # called GIT_SSH_KEY with your private key, so Infracost can access
            # private repositories (similar to how Terraform/Terragrunt does).
            # - |
            #   mkdir -p ~/.ssh
            #   eval `ssh-agent -s`
            #   echo "$GIT_SSH_KEY" | tr -d '\r' | ssh-add -
            #   # Update this to github.com, gitlab.com, bitbucket.org, ssh.dev.azure.com or your source control server's domain
            #   ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts

            # Generate an Infracost cost estimate baseline from the comparison branch, so that Infracost can compare the cost difference.
            - |
              infracost breakdown --path=/tmp/base \
                                  --format=json \
                                  --out-file=infracost-base.json

            # Generate an Infracost diff and save it to a JSON file.
            - |
              infracost diff --path=. \
                            --compare-to=infracost-base.json \
                            --format=json \
                            --out-file=infracost.json

            # Posts a comment to the PR using the 'update' behavior.
            # This creates a single comment and updates it. The "quietest" option.
            # The other valid behaviors are:
            #   delete-and-new - Delete previous comments and create a new one.
            #   new - Create a new cost estimate comment on every push.
            # For Bitbucket Cloud:
            #   If you're using a User token or App password:
            #     use --bitbucket-token=myusername:$BITBUCKET_TOKEN, where the token can be a User token or App password.
            #   If you're using a Repository access token:
            #     use --bitbucket-token=$BITBUCKET_TOKEN
            # For Bitbucket Server:
            #   use --bitbucket-token=$BITBUCKET_TOKEN with your HTTP access token.
            #   use --bitbucket-server-url=https://your-bitbucket-server.com to override the default https://bitbucket.org.
            # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options
            #   including --exclude-cli-output that posts only the summary table.
            - |
              infracost comment bitbucket --path=infracost.json \
                                          --repo=$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG \
                                          --pull-request=$BITBUCKET_PR_ID \
                                          --bitbucket-token=alikhajeh1:$BITBUCKET_TOKEN \
                                          --behavior=update

  branches:
    master:
      - step:
          oidc: true
          image: amazon/aws-cli
          max-time: 5
          script:
            - echo "role - ${IODC_IAM_ROLE_ARN}"
            - set -- $(aws sts assume-role-with-web-identity
              --role-arn ${IODC_IAM_ROLE_ARN}
              --role-session-name bitbucket-build-session
              --web-identity-token $BITBUCKET_STEP_OIDC_TOKEN
              --duration-seconds 1000
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
              --output text)

            - export AWS_ACCESS_KEY_ID="$1"
            - export AWS_SECRET_ACCESS_KEY="$2"
            - export AWS_SESSION_TOKEN="$3"
            - export AWS_DEFAULT_REGION="us-east-1"

            - echo -e "Check access from managment account"
            - aws s3 ls

            - echo -e "Assume role from development account"
            - set -- $(aws sts assume-role
              --role-arn arn:aws:iam::935454902317:role/terraform-execution-full-access
              --role-session-name terraform-execution-full-access
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
              --output text)

            - export AWS_ACCESS_KEY_ID="$1"
            - export AWS_SECRET_ACCESS_KEY="$2"
            - export AWS_SESSION_TOKEN="$3"
            - export AWS_DEFAULT_REGION="us-east-1"
            - aws s3 ls

      - step:
          name: Validate
          image: hashicorp/terraform
          trigger: manual
          script:
            - terraform init --upgrade

      - step:
          name: Deploy to Production
          deployment: Production
          image: hashicorp/terraform
          trigger: manual
          script:
            - terraform init
            - terraform plan
          # - terraform apply -auto-approve
